<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="reftest-wait" onload="go()"><script>function go() { var svg = document.documentElement; var anim = document.getElementById(&apos;anim&apos;); // To begin with we have an animation from 0s-2s svg.pauseAnimations(); svg.setCurrentTime(1.0); // Seek to mid-interval // Generate a lot of instance times beyond the interval end at t=2s // The threshold will be something like 100 but just in case it&apos;s 200 // let&apos;s make 210 instance times. for (var i = 0; i &lt; 210; i++) { // The first instance time will be at t=3s and then we&apos;ll generate lots // of times following on from there anim.beginElementAt(2 + i * 0.1); } // Seek past the interval end -- this will cause the filtering to kick in. // The first stage of filtering will only filter instance times before the // end of the previous interval (i.e. before t=2s in this case). // The second stage of filtering should take care of the rest. svg.setCurrentTime(2.5); // The second stage of filtering will clear out the oldest times first. // However, since first time we generated at t=3s is now used as begin of // the yet-to-begin current interval it should not be cleared. // So if we force the current interval to be updated by adding another // instance time the next interval should still start at t=3s. anim.beginElementAt(100); // Now when we go to do a snapshot at t=3s, the animation should be in // effect. svg.setCurrentTime(3.0); svg.removeAttribute(&quot;class&quot;); }</script><rect id="blueRect" width="200" height="200" x="100" y="15" fill="#00f"><set id="anim" attributeName="x" begin="0s" dur="2s" to="15"/></rect></svg>