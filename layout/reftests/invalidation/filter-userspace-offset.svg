<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500" height="500" viewBox="0 0 500 500"><title>Filters and offsets, user space origins, invalidation</title><defs><filter id="flood-boundingBox" width="100%" height="100%" x="0%" y="0%" color-interpolation-filters="sRGB" filterUnits="objectBoundingBox"><feFlood flood-color="#0f0"/></filter><filter id="matrix-boundingBox" width="100%" height="100%" x="0%" y="0%" color-interpolation-filters="sRGB" filterUnits="objectBoundingBox"><feColorMatrix type="matrix" values="0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0"/></filter><filter id="matrix-fillPaint-boundingBox" width="100%" height="100%" x="0%" y="0%" color-interpolation-filters="sRGB" filterUnits="objectBoundingBox"><feColorMatrix in="FillPaint" type="matrix" values="0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0"/></filter><filter id="flood-userSpace-atZero" width="100" height="100" x="0" y="0" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feFlood flood-color="#0f0"/></filter><filter id="matrix-userSpace-atZero" width="100" height="100" x="0" y="0" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feColorMatrix type="matrix" values="0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0"/></filter><filter id="flood-userSpace-at100" width="100" height="100" x="100" y="100" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feFlood flood-color="#0f0"/></filter><filter id="matrix-userSpace-at100" width="100" height="100" x="100" y="100" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feColorMatrix type="matrix" values="0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0"/></filter><filter id="matrix-fillPaint-userSpace-at100" width="100" height="100" x="100" y="100" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feColorMatrix in="FillPaint" type="matrix" values="0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0"/></filter><mask id="boundingBox" maskContentUnits="objectBoundingBox"><rect width="1" height="1" x="0" y="0" fill="#fff"/></mask><mask id="userSpace-atZero" maskContentUnits="userSpaceOnUse"><rect width="100" height="100" x="0" y="0" fill="#fff"/></mask><mask id="userSpace-at100" maskContentUnits="userSpaceOnUse"><rect width="100" height="100" x="100" y="100" fill="#fff"/></mask><g id="usedRect"><rect width="100" height="100" class="fillColor"/></g></defs><g transform="translate(40,40)"><rect width="101" height="101" x="99.5" y="99.5" fill="none" stroke="#000" stroke-width="1"/><rect id="rect" width="100" height="100" x="0" y="100" class="fillColor offsetContainer"/><use id="use" x="0" y="100" class="offsetContainer" xlink:href="#usedRect"/><svg id="innerSVG" width="100" height="100" x="0" y="100" class="offsetContainer"><rect width="100" height="100" class="fillColor"/></svg><foreignObject id="foreignObject" width="100" height="100" x="0" y="100" class="offsetContainer"><svg width="100" height="100"><rect width="100" height="100" class="fillColor"/></svg></foreignObject></g><script><![CDATA[

var options = {
  offsetContainer: "rect",
  filter: null,
  mask: null,
  updateOffsetOn: "reftestInvalidate" // | "initial" | "timeout"
};

location.search.substr(1).split("&").forEach(function (s) {
  var pv = s.split("=");
  options[pv[0]] = pv[1] || true;
});

var offsetContainer = document.getElementById(options.offsetContainer);

function updateOffsetNow() {
  offsetContainer.setAttribute("x", "100");
}

function updateOffsetOnReftestInvalidate() {
  document.documentElement.setAttribute("class", "reftest-wait");
  document.addEventListener("MozReftestInvalidate", function () {
    updateOffsetNow();
    document.documentElement.removeAttribute("class");
  }, false);
}

function updateOffsetOnTimeout() {
  setTimeout(updateOffsetNow, 500);
}

options.updateOffset = options.updateOffsetOn == "initial" ? updateOffsetNow :
                         (options.updateOffsetOn == "timeout" ? updateOffsetOnTimeout :
                          updateOffsetOnReftestInvalidate);

var offsetContainers = Array.prototype.slice.call(document.getElementsByClassName("offsetContainer"), 0);
for (var i = 0; i < offsetContainers.length; i++) {
  if (offsetContainers[i] != offsetContainer) {
    offsetContainers[i].parentNode.removeChild(offsetContainers[i]);
  }
}

var fillColor = options.filter ? "red" : "lime";
if (options.filter) {
  offsetContainer.setAttribute("filter", "url(#" + options.filter + ")");
}
if (options.mask) {
  offsetContainer.setAttribute("mask", "url(#" + options.mask + ")");
}

var fillColors = document.getElementsByClassName("fillColor");
for (var j = 0; j < fillColors.length; j++) {
  fillColors[j].setAttribute("fill", fillColor);
}

options.updateOffset();

]]></script></svg>